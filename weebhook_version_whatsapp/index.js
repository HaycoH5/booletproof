const express = require('express');
const multer = require('multer');
const qrcode = require('qrcode-terminal');
const { Client, LocalAuth, MessageMedia } = require('whatsapp-web.js');
const axios = require('axios');

const app = express();
const PORT = 3000;

const storage = multer.memoryStorage();
const upload = multer({ storage });

app.use(express.json());

const client = new Client({
    authStrategy: new LocalAuth()
});

client.on('qr', qr => qrcode.generate(qr, { small: true }));
client.on('ready', () => console.log('WhatsApp –∫–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'));
client.on('disconnected', reason => console.log('WhatsApp –æ—Ç–∫–ª—é—á–∏–ª—Å—è:', reason));

// === üì• –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
client.on('message', async (message) => {
    const contact = await message.getContact();
    const phone = contact.number || 'unknown';
    const now = new Date().toISOString();

    const logEntry = {
        from: phone,
        timestamp: now
    };

    if (message.type === 'chat') {
        logEntry.type = 'text';
        logEntry.content = message.body;
    }

    if (message.hasMedia) {
        const media = await message.downloadMedia();
        if (media) {
            const ext = media.mimetype.split('/')[1].split(';')[0];
            logEntry.type = 'media';
            logEntry.media_type = media.mimetype;
            logEntry.ext = ext;
            logEntry.media_data = Buffer.from(media.data, 'base64').toString('hex');
        }
    }

    // üîÅ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Python-—Å–µ—Ä–≤–µ—Ä
    axios.post('http://localhost:5000/webhook', logEntry)
        .then(() => console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${phone} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Flask`))
        .catch((err) => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Flask:', err.message));
});

// === üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ===
app.post('/send', upload.single('file'), async (req, res) => {
    console.log('üì© /send –ø–æ–ª—É—á–µ–Ω');
    const phone = req.body.phone;
    const caption = req.body.caption || '';
    const chatId = `${phone}@c.us`;

    if (!phone) {
        return res.status(400).json({ error: '–ù–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª—è' });
    }

    try {
        if (req.file) {
            const base64File = req.file.buffer.toString('base64');
            const media = new MessageMedia(req.file.mimetype, base64File, req.file.originalname);

            console.log('üìé –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞:', req.file.originalname);
            await client.sendMessage(chatId, media, { caption });
            return res.json({ status: 'file sent' });
        } else if (req.body.message) {
            await client.sendMessage(chatId, req.body.message);
            return res.json({ status: 'message sent' });
        } else {
            return res.status(400).json({ error: '–ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏' });
        }
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:', err.message);
        return res.status(500).json({ error: err.message });
    }
});

app.listen(PORT, () => {
    console.log(`JS-—Å–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç –Ω–∞ http://localhost:${PORT}`);
});

client.initialize();
