from flask import Flask, request, jsonify
from apscheduler.schedulers.background import BackgroundScheduler
from datetime import datetime, timezone, timedelta
from pathlib import Path
import os
import requests

from booletproof.AgroLLM.process_messages import LLMProcess
from booletproof.user_and_system_interface.data_save import DataSave

import config

app = Flask(__name__)
scheduler = BackgroundScheduler()
scheduler.start()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BASE_DIR = Path('agro_data')
JS_SERVER_URL = 'http://localhost:3000/send'
EXCEL_FOLDER = './'
TARGET_FILE = '1115042025_BulletProof.xlsx'
PHONE_NUMBER = '...'
SEND_AT = (datetime.now() + timedelta(seconds=5)).strftime('%Y-%m-%d %H:%M:%S')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
data_save = DataSave(config.BASE_DIR, config.EXEL_TABLE_BASE_NAME)
llm_process = LLMProcess()


@app.route('/webhook', methods=['POST'])
def webhook():
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å –≤–µ–±—Ö—É–∫–∞.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —á–µ—Ä–µ–∑ LLM.
    """
    data = request.get_json()

    if not data or 'from' not in data:
        return jsonify({'error': 'Invalid data: missing "from" field'}), 400

    phone = data['from']
    date_str = datetime.now(timezone.utc).strftime('%Y-%m-%d')
    user_dir = BASE_DIR / phone / date_str
    media_dir = user_dir / 'media'
    os.makedirs(media_dir, exist_ok=True)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞
    if data.get('type') == 'media' and 'media_data' in data:
        ext = data.get('ext', 'bin')
        timestamp = int(datetime.utcnow().timestamp())
        media_filename = f'media_{timestamp}.{ext}'
        media_path = media_dir / media_filename

        try:
            with open(media_path, 'wb') as f:
                f.write(bytes.fromhex(data['media_data']))
        except ValueError:
            return jsonify({'error': 'Invalid media_data format'}), 400

        data['media_path'] = str(media_path.relative_to(user_dir))
        data.pop('media_data', None)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞
    print(data)
    data_save.save_to_txt(data)

    response = llm_process.process_messages(
        data_save.append_message_to_table,
        data.get("content", ""),
        config.EXEL_TABLE_DIR,
        data.get("timestamp", "")
    )
    print(response)

    return jsonify({'status': 'ok'})


def send_file_to_whatsapp(phone, file_path, caption=''):
    with open(file_path, 'rb') as f:
        files = {
            'file': (os.path.basename(file_path), f)
        }
        data = {
            'phone': phone,
            'caption': caption
        }
        response = requests.post(JS_SERVER_URL, data=data, files=files)

    print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {response.status_code}, {response.text}")

    try:
        return response.json()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON: {e}")
        return {'status': 'error', 'response': response.text, 'code': response.status_code}


def job():
    file_path = os.path.join(EXCEL_FOLDER, TARGET_FILE)
    if os.path.exists(file_path):
        print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª {file_path} –ø–æ–ª—É—á–∞—Ç–µ–ª—é {PHONE_NUMBER}")
        send_file_to_whatsapp(PHONE_NUMBER, file_path, caption='üßæ –í–∞—à —Ñ–∞–π–ª –≥–æ—Ç–æ–≤')
    else:
        print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")


def schedule_task():
    run_date = datetime.strptime(SEND_AT, '%Y-%m-%d %H:%M:%S')
    scheduler.add_job(job, 'date', run_date=run_date)
    print(f"–ó–∞–¥–∞—á–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {SEND_AT}")


if __name__ == '__main__':
    schedule_task()
    app.run(debug=True, use_reloader=False)
